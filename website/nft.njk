---
layout: layouts/base.njk
pagination:
  data: nfts
  size: 1
  alias: nft
permalink: "collection/nft-{{ nft.name }}.html"
title: "NFT {{ nft.name }}"
---
<script type="module" async>
  import {ethers} from "/js/ethers.js";
  import {abi} from "/js/identity-contract.js";
  import {abi as nftAbi} from "/js/nft-abi.js";

  document.getElementById("modalText").innerHTML = "Connecting to MetaMask...";

  const settings = getSettings(getCookie("mode") || "mainnet");


  let provider;
  let contract;
  let isMinted = 0;
  let identityContractAddress;
  const id = window.location.href.split('-').pop().split('.')[0];
  let address = "";


  var modal = document.getElementById("myModal");

  // Get the button that opens the modal
  const btn = document.getElementById("myBtn");
  if (isMinted === 0){
    btn.classList.remove("disabled");
  }


  // Get the <span> element that closes the modal
  const span = document.getElementsByClassName("close")[0];

  // When the user clicks the button, open the modal
  btn.onclick = function openModal() {
    if (isMinted !== 0) {
      return;
    }
    modal.style.display = "block";
    mint();
  }

  // When the user clicks on <span> (x), close the modal
  span.onclick = function() {
    modal.style.display = "none";
  }

  if (window.ethereum) {
    await window.ethereum.request({
      method: 'wallet_switchEthereumChain',
      params: [{ chainId: settings.network }],
    });
    provider = new ethers.providers.Web3Provider(window.ethereum, "any");
    await provider.send('eth_requestAccounts', []);
    let signer = await provider.getSigner();
    contract = new ethers.Contract(settings.contract, nftAbi, provider);
    isMinted = await contract.connect(signer).isMinted(id);
    let soldOut = document.getElementById("sold_out");
    let reserved = document.getElementById("reserved");


    if (isMinted === 1) {
      soldOut.removeAttribute("hidden");
    }
    else if (isMinted === 2) {
      reserved.removeAttribute("hidden");
    }
    identityContractAddress = await contract.connect(signer).identityProvider();
    address = await signer.getAddress();


    contract.on( 'Reserve' , (wallet, tokenId) => {
      if (parseInt(tokenId) !== parseInt(id)) return;
      document.getElementById("modalText").innerHTML = "Proofi verification in pogress";
      document.getElementById("second_li").className = "complete";
      document.getElementById("third_li").className = "progress";
      reserved.removeAttribute("hidden");
    } );

    contract.on( 'Transfer' , (from, to, tokenId) => {
      if (parseInt(tokenId) !== parseInt(id)) return;

      reserved.hidden = true;
      soldOut.removeAttribute("hidden");
      document.getElementById("modalText").innerHTML = "Congratulations!! <br>" +
        "the NFT has been successfully minted! <br> " +
        "You can see your NFT on <a href='"+ settings.opensea+ "/"+ address +"' target='_blank'>Opensea <a>";
      document.getElementById("third_li").className = "complete";
      document.getElementById("fourth_li").className = "complete";
    } );

    contract.on( 'CancelReservation' , (wallet, tokenId) => {
      if (parseInt(tokenId) !== parseInt(id)) return;
      reserved.hidden = true;
      document.getElementById("third_li").className = "complete";
      document.getElementById("fourth_li").classList.remove("progress");
      document.getElementById("modalText").innerHTML = "The user is not allowed to mint";
    } );

    if (document.referrer === settings.proofi){
      openModal();
    }
  }

  async function mint() {
    if (!window.ethereum) {
      alert('Metamask not found, please install it');
      return
    }
    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
    if (chainId != settings.network) {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: settings.network }],
      });
    }

    await window.ethereum.send('eth_requestAccounts');
    let provider = new ethers.providers.Web3Provider(window.ethereum, "any");// any needed to allow network changes

    isAddressKnown(provider).then(async resp => {
        if (resp == true) {
          //document.getElementById("modalText").innerHTML = "Minting the NFT";
          const signer = provider.getSigner();
          const contract = new ethers.Contract(settings.contract, nftAbi, provider);
          try {
            const result = await contract.connect(signer)['mint'](id,
              {
                value: 5000000000000000,
                gasLimit: 10000000,
                nonce: undefined,
              })
            try {
              document.getElementById("modalText").innerHTML = "Awaiting on validators to pick up the transaction";
              document.getElementById("first_li").className = "complete";
              document.getElementById("second_li").className = "progress";
              const ret = await result.wait()
            } catch (error) {
              console.error(error);
              document.getElementById("second_li").className = "complete";
              document.getElementById("third_li").classList.remove("progress");
              document.getElementById("modalText").innerHTML = "Minting unsuccessfull";
            }
          } catch (error) {
            modal.style.display = "none";
          }
        }
        else {
          document.getElementById("modalText").innerHTML = "<p style='text-align:center'> <img src='/img/proofi-black.svg' alt='' > </p>" +
            "<p style='text-align:center'> We need to verify your identity before being able to mint the NFT.<p>" +
            "<p style='text-align:center'> Your identity is used to ensure that only one NFT is minted per person. </p>" +
            "<p style='text-align:center'> <button id='continue'  onclick='redirect()'> CONTINUE </button> <p>";
        }
      }
    );
  }

  function delay(milliseconds){
    return new Promise(resolve => {
      setTimeout(resolve, milliseconds);
    });
  }

  async function isAddressKnown(provider) {
    const signer = provider.getSigner();
    const address = await signer.getAddress();
    const contract = new ethers.Contract(identityContractAddress, abi, provider);
    return contract['isKnown'](address).then((resp) => {
      return resp;
    }).
    catch((error) => {
      console.log(error);
      return false;
    })
  }

  var a = document.getElementById('linkId');
  a.href = settings.opensea + "/assets/" + settings.network_name +"/"+settings.contract +"/" + {{ nft.id }}
</script>


<script>
  function redirect() {
    window.open(`${settings.network}accounts/participate?redirectUrl=${encodeURIComponent(window.location.href)}`,"_self")
  }

</script>

<div class="metaportal_fn_mintpage">

  <div class="container small">

    <input type="hidden" id="hiddenVar"/>

    <!-- Mint Top -->
    <div class="metaportal_fn_mint_top">
      <div style="position: relative">
        <div class="mint_left">
          <div class="img" >
            <div class="img_in" data-bg-img='https://ipfs.krazykobe.com/ipfs/QmdYSTJEnRyjMtuXpE2PeC9M2jA91UYigcmx49fguxQZUt/{{ nft.name}}.jpg'>
              <div>
                <img src='https://ipfs.krazykobe.com/ipfs/QmdYSTJEnRyjMtuXpE2PeC9M2jA91UYigcmx49fguxQZUt/{{ nft.name }}.jpg' alt=''>
              </div>
            </div>
          </div>
        </div>
{#        <img class="mint_left" id="sold_out" src="https://ipfs.krazykobe.com/ipfs/QmYUqng7Ccmni7uTnumNF5v5wkQZA9w3CEuJfQQ2tSic8R/sold-out.png" alt="" hidden>#}
        <img class="mint_left" id="sold_out" src="/img/sold-out.png" alt="" hidden>
        <img class="mint_left" id="reserved" src="/img/reserved.png" alt="" hidden>
      </div>
      <div class="mint_right">
        <div class="metaportal_fn_share">
          <h5 class="label">Share:</h5>
          <ul>
            <li><a href="https://t.me/LTOnetwork" target="_blank"><img src="/svg/social/telegram.svg" alt="" class="fn__svg"></a></li>
            <li><a href="https://twitter.com/TheLTONetwork" target="_blank"><img src="/svg/social/twitter-1.svg" alt="" class="fn__svg"></a></li>
            <li><a href="https://www.facebook.com/TheLTONetwork" target="_blank"><img src="/svg/social/facebook-1.svg" alt="" class="fn__svg"></a></li>
            <li><a href="https://www.instagram.com/theltonetwork/" target="_blank"><img src="/svg/social/instagram-1.svg" alt="" class="fn__svg"></a></li>
            <li><a href="https://www.linkedin.com/company/ltonetwork/mycompany/" target="_blank"><img src="/svg/social/linkedin-1.svg" alt="" class="fn__svg"></a></li>
            <li><a href="https://www.youtube.com/c/LTONetwork" target="_blank"><img src="/svg/social/youtube-1.svg" alt="" class="fn__svg"></a></li>
          </ul>
        </div>
<!--              <h3 class="fn__maintitle" data-text="Krazy Kobe" data-align="left" id="kkTitle">-->
          <h3 class="fn__maintitle" data-align="left">
              Krazy Kobe {{ nft.name }}
          </h3>
        <div class="view_on">
          <ul>
            <li>
              <span>View On:</span>
            </li>
            <li>
              <a id="linkId" target="_blank"><img src="/svg/opensea.svg" alt="" class="fn__svg"></a>
            </li>
            <script>

            </script>

          </ul>
        </div>
        <a class="metaportal_fn_button disabled" id="myBtn">Mint Now</a>

        <!-- The Modal -->
        <div id="myModal" class="modal">

          <!-- Modal content -->
          <div class="modal-content">
            <span class="close">&times;</span>
            <ol class="steps clearfix">
              <li id="first_li" class="progress">
                Send transaction
              </li>
              <li id="second_li">
                Waiting for confirmation
              </li>
              <li id="third_li">
                Verification by Proofi
              </li>
              <li id="fourth_li">
                NFT minted
              </li>
            </ol>
            <div>
              <p id="modalText"></p>
            </div>
          </div>

        </div>

        <div class="mint_desc">
          <p id="terms">By clicking “MINT NOW” button, you agree to our <a href="/documents/terms-and-conditions.pdf" target="_blank">Terms of Service</a> and our <a href="/documents/privacy-policy.pdf" target="_blank">Privacy Policy</a>.</p>
        </div>
      </div>

    </div>
    <!-- !Mint Top -->

    <!-- NFT Categories -->
    <div class="metaportal_fn_nft_cats">
      <ul>
        <li>
          <div class="item">
            <h4 class="parent_category" >Image</h4>
            <h3 class="child_category" title="Image" id="nftImage"> {{ nft.property1 }}</h3>
          </div>
        </li>
        <li>
          <div class="item">
            <h4 class="parent_category">Body</h4>
            <h3 class="child_category" title="Body" id="nftBody"> {{ nft.property2 }}</h3>
          </div>
        </li>
        <li>
          <div class="item">
            <h4 class="parent_category">Type</h4>
            <h3 class="child_category" title="Type" id="nftType"> {{ nft.property3 }}</h3>
          </div>
        </li>
      </ul>
    </div>
  </div>


</div>
